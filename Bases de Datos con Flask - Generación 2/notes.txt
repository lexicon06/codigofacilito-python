ORM

-> Active Record (Ruby)
-> Eloquent (PHP)
-> Peewee (Python)
-> SQLAlchemy (Python)
-> Entity Framework (C#)
-> Hibernate (Java)
-> Django propio rm


# SQLAlchemy

SELECT id, usernme, email FROM id= 101;


# Peewee

User.select(
    User.id,
    User.username,
    User.email
).where(User.id == 101)

# Eloquent


<?php
$usuarios = App\Usuario::select('nombre', 'steamid', 'imagen')->get();

foreach ($usuarios as $usuario) {
    echo $usuario->nombre;
    echo $usuario->steamid;
    echo $usuario->imagen;
}
?>



La primera ventaja en esta lista, y quizás la más importante, es que al utilizar
un ORM, como se encuentran diseñados para un lenguaje en particular, no debemos preocuparnos
tanto por conocer y dominar SQL. Lo cual nos permite enfocarnos al cien por ciento en el lenguaje que estemos utilizando del lado del backend.
Java, PHP, Python, etc ...

Otra ventaja es que, la mayoría de los ORMs nos permiten
interactuar con diferentes gestores de base de datos, pudiendo asi,
en dado caso lo llegarámos a necesitar cambiar de un gestor a otro sin muchos problemas.




"""
DataTypes PeeWee

CharField
TextField
DateTimeField
BooleanField
FloatField
ForeignKey Field
Etc..
"""




Para consultas complejas, que involucren multiples tablas,
condiciones e inclusive operaciones, es posible que el ORM no
llegue a generar las sentencias más óptimas para el gestor.

Dependiendo del ORM, es posible que las configuraciones sean un
poco tediosas., Teniendo que importar, instalar, actualizar,
generar nuevos archivos etc...

Si no tenemos ningún tipo de conocimientos con SQL y 
dependamos completamente de un ORM, muy probablemente no
lleguemos a comprender al cien por ciento las sentencias que estamos creando




to run this project you have to have a clean database to avoid problems



TODO study migration in flask